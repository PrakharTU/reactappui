{"version":3,"sources":["pages/img/mltoolicon.png","pages/Homepage.js","pages/Page1.js","pages/Page2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","className","id","src","MLToolLogo","style","width","filter","alt","React","Component","Page1","document","querySelector","background","pos","interval","setInterval","clearInterval","transform","App","to","path","component","Home","Page2","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,wC,8OCgB5BC,E,iLAVX,OACI,yBAAKC,UAAU,OAAOC,GAAG,YACrB,yBAAKD,UAAU,WACX,yBAAKE,IAAKC,IAAYC,MAAO,CAACC,MAAM,OAAOC,OAAQ,2BAA2BC,IAAI,W,GAL3EC,IAAMC,WC4BdC,E,4LA5BPC,SAASC,cAAc,aAAaR,MAAMS,WAA1C,QACAF,SAASC,cAAc,sBAAsBR,MAAME,OAAnD,YACA,IAAIQ,EAAM,EACNC,EAAWC,aACf,YACc,KAAPF,EACCG,cAAcF,GAGdJ,SAASC,cAAc,OAAOR,MAAMc,UAApC,qBAA4DJ,EAA5D,MACJA,MAP8B,K,6CAYlCH,SAASC,cAAc,aAAaR,MAAMS,WAA1C,UACAF,SAASC,cAAc,sBAAsBR,MAAME,OAAnD,c,+BAGA,OACI,yBAAKN,UAAU,OAAOC,GAAG,MACrB,yBAAKD,UAAU,2BACX,wBAAIA,UAAU,WAAd,mB,GAxBAQ,IAAMC,WC+BXC,E,4LA7BPC,SAASC,cAAc,aAAaR,MAAMS,WAA1C,QACAF,SAASC,cAAc,sBAAsBR,MAAME,OAAnD,YACA,IAAIQ,EAAM,EACNC,EAAWC,aACf,YACc,KAAPF,EACCG,cAAcF,GAGdJ,SAASC,cAAc,OAAOR,MAAMc,UAApC,qBAA4DJ,EAA5D,MACJA,MAP8B,K,6CAYlCH,SAASC,cAAc,aAAaR,MAAMS,WAA1C,UACAF,SAASC,cAAc,sBAAsBR,MAAME,OAAnD,c,+BAGA,OACI,yBAAKN,UAAU,OAAOC,GAAG,MACrB,yBAAKD,UAAU,yBACX,wBAAIA,UAAU,WAAd,wB,GAxBAQ,IAAMC,WCuBXU,E,iLAjBX,OACE,kBAAC,IAAD,KACE,6BACE,wBAAIlB,GAAG,QACL,kBAAC,IAAD,CAASmB,GAAG,KAAI,wBAAIpB,UAAU,yBAC9B,kBAAC,IAAD,CAASoB,GAAG,SAAQ,wBAAIpB,UAAU,8BAClC,kBAAC,IAAD,CAASoB,GAAG,SAAQ,wBAAIpB,UAAU,6BAEpC,kBAAC,IAAD,CAAOqB,KAAK,IAAIC,UAAWC,IAC3B,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWE,U,GAZxBhB,IAAMC,WCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5d042ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mltoolicon.e8397b8d.png\";","import React from 'react';\nimport '../App.css';\nimport MLToolLogo from './img/mltoolicon.png';\n\nclass Homepage extends React.Component{\n  render(){\n    return (\n        <div className=\"page\" id=\"homepage\">\n            <div className=\"content\">\n                <img src={MLToolLogo} style={{width:\"40vw\",filter: \"brightness(0) invert(1)\"}}alt=\"\"/>\n            </div>  \n        </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\n\nclass Page1 extends React.Component{\n    componentDidMount(){\n        document.querySelector(\"#homepage\").style.background=`black`;\n        document.querySelector(\"#homepage>.content\").style.filter=`blur(3px)`;\n        let pos = 0;\n        let interval = setInterval(frame, 1);\n        function frame(){\n            if(pos===-91){\n                clearInterval(interval);\n            }\n            else\n                document.querySelector(\"#p2\").style.transform=`translateX(${pos}%)`;\n            pos--;\n        }\n    }\n\n    componentWillUnmount(){\n        document.querySelector(\"#homepage\").style.background=`#00b0ff`;\n        document.querySelector(\"#homepage>.content\").style.filter=`blur(0px)`;        \n    }\n    render(){\n        return(\n            <div className=\"page\" id=\"p2\">\n                <div className=\"content fas fa-keyboard\">\n                    <h1 className=\"heading\">Know More</h1>\n                </div>\n            </div> \n        )\n    }\n}\nexport default Page1;","import React from 'react';\n\nclass Page1 extends React.Component{\n    componentDidMount(){\n        document.querySelector(\"#homepage\").style.background=`black`;\n        document.querySelector(\"#homepage>.content\").style.filter=`blur(3px)`;\n        let pos = 0;\n        let interval = setInterval(frame, 0);\n        function frame(){\n            if(pos===-91){\n                clearInterval(interval);\n            }\n            else\n                document.querySelector(\"#p3\").style.transform=`translateX(${pos}%)`;\n            pos--;\n        }\n    }\n\n    componentWillUnmount(){\n        document.querySelector(\"#homepage\").style.background=`#00b0ff`;\n        document.querySelector(\"#homepage>.content\").style.filter=`blur(0px)`;      \n    }\n    render(){\n        return(\n            <div className=\"page\" id=\"p3\">\n                <div className=\"content fas fa-rocket\">\n                    <h1 className=\"heading\">Host your apps</h1>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Page1;","import React from 'react';\nimport {BrowserRouter,Route,NavLink} from 'react-router-dom';\nimport Home from './pages/Homepage';\nimport Page1 from './pages/Page1';\nimport Page2 from './pages/Page2';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <BrowserRouter>\n        <div>\n          <ul id=\"menu\">\n            <NavLink to=\"/\"><li className=\"menuicon fa fa-bolt\"/></NavLink>\n            <NavLink to=\"page1\"><li className=\"menuicon fas fa-keyboard\"/></NavLink>\n            <NavLink to=\"page2\"><li className=\"menuicon fas fa-rocket\"/></NavLink>\n          </ul>\n          <Route path='/' component={Home}/>\n          <Route path='/page1' component={Page1}/>\n          <Route path='/page2' component={Page2}/>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}